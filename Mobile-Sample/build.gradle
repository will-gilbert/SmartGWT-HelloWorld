
//=============================================================================================
// U S A G E   ================================================================================
//=============================================================================================

task usage << { print """${'='*90}
$applicationName v$version

gradle compileJava
  Compile Java source code displaying warnings and error to the terminal console. Does not
  cross compile Java to JavaScript

gradle transpileGWT

gradle jettyRun
  Cross compiles the client side Java into JavaScript; launches Jetty.  Use any browser to 
  connect to the localhost on the port ${jettyRun.httpPort}.

gradle pageObjectTest
  Runs Page Object tests by launching Jetty in the background. Choose the test browser.
  via the contents of the gradle.properties file

gradle cucumber
  Runs Cucumber by launching Jetty in the background. Choose the test browser
  via the contents of the gradle.properties file. Always display the output in the browser.

gradle clean
  Delete temporary files from: 
       './$project.buildDir.name'
       './$gwtBuildDir'
       './gwt-unitCache'

${'='*90}
"""}

//=============================================================================================
// C O N F I G U R A T I O N  =================================================================
//=============================================================================================

import static java.awt.Desktop.desktop

apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'maven'
apply plugin: 'war'


// Project Configuration ----------------------------------------------------------------------

ext.applicationName = "SmartGWT-Mobile Sample"
group = 'client'
version = '1.0'

// WebApp Configuration -----------------------------------------------------------------------

// GWT Configuration
ext.gwtModule = 'Sample'                          // Path to module descriptor
ext.gwtModuleRenamedTo = 'app'                    // 'rename-to' within module descriptor
ext.gwtStartPage = 'index.html'                   // HTML launching file
ext.gwtBuildDir = 'build-gwt'                     // GWT build directory

// Java SDK Configuration ---------------------------------------------------------------------

sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility

//=============================================================================================
// R e p o s i t o r i e s   &   D e p e n d e n c i e s   ====================================
//=============================================================================================

// Create a GWT Compiler & Selenium compile configuration
configurations { 
    [gwtCompile, pageObjectsCompile, cucumberCompile, cucumberRuntime] 
}

repositories {
    mavenLocal()                                       // User's local
    mavenCentral()                                     // Maven Central repository
}

dependencies {

    def gwt         = '2.8.0'
    def junit       = '4.12'
    def gwtMockito  = '1.1.6'
    def powerMock   = '1.6.5'
    def selenium    = '2.48.2'
    def selenide    = '4.0'
    def cucumber    = '1.2.5'
    def groovy      = '2.4.7'

    // Download the SmartGWT Mobile jar at http://www.smartclient.com/product/smartgwtMobile.jsp
    compile files( "../lib/smartgwt-mobile.jar")

    compile ([
        "com.google.gwt:gwt-user:$gwt"
    ])

    testCompile([ 
        "junit:junit:$junit",
        "org.powermock:powermock-api-mockito:$powerMock",   // PowerMock using Mockito
        "org.powermock:powermock-module-junit4:$powerMock", // PowerMock using JUnit
        "com.google.gwt.gwtmockito:gwtmockito:$gwtMockito",
    ])

    // Develop Page Objects seperately from application  
    pageObjectsCompile ([ 
        "junit:junit:$junit",
        "org.seleniumhq.selenium:selenium-java:$selenium",
        "com.codeborne:selenide:$selenide",

    ]) 

    cucumberCompile([
        "org.codehaus.groovy:groovy-all:$groovy",
        "info.cukes:cucumber-groovy:$cucumber"
    ])
    
    // The GWT cross compiler; Java to JavaScript
    gwtCompile([
        "com.google.gwt:gwt-dev:$gwt", 
        "com.google.gwt:gwt-servlet:$gwt"
    ])
   
}

//============================================================================================
// S O U R C E   S E T S  ====================================================================
//============================================================================================

sourceSets {

    pageObjects {
        java { srcDirs 'src/pageObjects/java' }
    }

    cucumber {
        java { srcDirs 'src/pageObjects/java' }
    }

}


//============================================================================================
// G O O G L E   W E B   T O O L K I T   =====================================================
//============================================================================================

task transpileGWT(dependsOn: ['compileJava', 'copyWebAppResources'], type:JavaExec) {

    description ='Cross compiles Java into JavaScript for each browser specified'

    // Don't invoke GWT compiler if no source code has changed; 
    //  Gradle Goodness at work here!!

    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir new File("${gwtBuildDir}/${gwtModuleRenamedTo}")

    // Define the properties for the 'JavaExec' task
    main ='com.google.gwt.dev.Compiler'
    
    jvmArgs = ['-Xmx512M']                 // 256M Memory, increase for larger Apps

    classpath = files([
        sourceSets.main.java.srcDirs,      // Contains Java sources to be compiled into JavaScript
        sourceSets.main.runtimeClasspath,  // Contains .gwt.xml file
        configurations.gwtCompile.files    // Contains the GWT compiler JAR
    ])

    args = [ "-war", gwtBuildDir,  gwtModule]

}

task copyWebAppResources(type: Copy) {
    description = "Copies resources into '${gwtBuildDir}'"

    // Modify the web.xml file to provide a description
    from('src/main/webapp') {
        include '**/web.xml'
    }

    // Copy the other unmodified files as well
    from('src/main/webapp') {
       exclude '**/web.xml'
    }

    into gwtBuildDir
}


task cleanGWT(type:Delete) {
    delete gwtBuildDir
    delete 'gwt-unitCache'
}


//============================================================================================
// J E T T Y   C O N F I G U R A T I O N  ==================================================== 
//============================================================================================

// Foreground application

jettyRun {
    dependsOn = [transpileGWT]
    httpPort = 9090              // Avoid potential conflicts with existing 8080
 }

jettyRun.doFirst {
    print """
    +${'='*110}
    |
    | Open a browser with the URL:  http://localhost:$jettyRun.httpPort/$project.name/$gwtStartPage
    |
    | macOS: Command-"Double Click" on the URL
    | Control-C (Command-period on macOS) to quit
    |
    +${'='*110}

    """.replaceAll(/\n */,'\n')
}


// Background daemon used by functional testing
// 
task jettyDaemon(type: org.gradle.api.plugins.jetty.JettyRun, dependsOn: transpileGWT) {
    daemon = true
    httpPort = 9090              // Avoid potential conflicts with existing 8080
    stopPort = 9091
    stopKey = "stop jettyDaemon"
}

jettyStop {
    stopPort = 9091
    stopKey = "stop jettyDaemon"

}

//============================================================================================
// P A G E   O B J E C T S   ================================================================= 
//============================================================================================

task pageObjectsTest(type: Test, dependsOn: jettyDaemon) {

    // Don't rerun test if they are up to date
    outputs.upToDateWhen { true }

    // Pass the test URL, browser & window size
    systemProperty 'selenide.baseUrl', "http://localhost:$jettyRun.httpPort/$project.name/"
    systemProperty('selenide.browser', findProperty('selenide.browser'));
    systemProperty('selenide.browser-size', findProperty('selenide.browser-size'));

    testClassesDir = sourceSets.pageObjects.output.classesDir
    classpath = sourceSets.pageObjects.runtimeClasspath

    finalizedBy jettyStop
}

//============================================================================================
// C U C U M B E R   ========================================================================= 
//============================================================================================

task cucumber(type:JavaExec, dependsOn: [pageObjectsClasses, jettyDaemon]) {

    // Don't rerun test if they are up to date
    outputs.upToDateWhen { false }

    // Pass the test URL, browser & window size
    systemProperty "selenide.baseUrl", "http://localhost:$jettyRun.httpPort/$project.name/"
    systemProperty('selenide.browser', findProperty('selenide.browser'));
    systemProperty('selenide.browser-size', findProperty('selenide.browser-size'));

    main = "cucumber.api.cli.Main"
    classpath = configurations.cucumberCompile + 
                sourceSets.pageObjects.runtimeClasspath
    args = [
        '--plugin', "html:$testReportDir/cucumber",
        '--glue', 'src/cucumber/steps', 
        'src/cucumber'
    ]

    finalizedBy jettyStop
}


//============================================================================================
// U T I L I T Y   M E T H O D S  ============================================================ 
//============================================================================================

def String findProperty(String propertyName, defaultValue='') {
    def property = rootProject.hasProperty(propertyName) ? rootProject.getProperty(propertyName) : defaultValue
    return property?.trim()
}

//============================================================================================
// G R A D L E   C O N F I G U R A T I O N  ==================================================
//============================================================================================

// WAR and Jetty builds; requires results of the 'transpileGWT' task rather than 'src/main/webapp'
webAppDirName = "${gwtBuildDir}"

clean { dependsOn 'cleanGWT'}

test {

    // Always run tests; When you have changed the data but not the test code
    outputs.upToDateWhen { false }
    
    testLogging { 
        afterSuite { desc, result ->
          if (desc.parent == null) {
                // Green background for complete success, red for any failures
                print ((result.resultType.toString() == "SUCCESS") ? '\033[1;30m\033[1;42m' : '\033[1;37m\033[1;41m')
                print "Results: ${result.resultType} "
                print "(${result.testCount} tests, "
                print "${result.successfulTestCount} successes, "
                print "${result.failedTestCount} failures, "
                print "${result.skippedTestCount} skipped)"
                println '\033[0m'
            }
        }
    }

}

//============================================================================================
// U N I T   T E S T I N G ===================================================================
//============================================================================================

// Launch the browser if any unit or page object tests fails; Always show Cucumber results
gradle.taskGraph.afterTask { task, taskState ->

    if ( task.name == 'test' && taskState.failure ) {
        openReport 'test/index.html'
    }

    if (  task.name == 'pageObjectsTest' && taskState.failure )
        openReport 'pageObjectsTest/index.html'

    if (  task.name == 'cucumber' )
        openReport 'cucumber/index.html'
}

def openReport(fileName) {
    def report  = new File(testReportDir, fileName)
    if ( report.exists() )
        desktop.browse( report.toURI() )
}

