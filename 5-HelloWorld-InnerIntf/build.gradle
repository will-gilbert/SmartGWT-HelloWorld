task usage doLast { 
    print """${'='*80}
${applicationName}, v${project.version}

gradle compileJava
  Compile Java source code displaying warnings and error to the terminal console. Does not
  cross compile Java to JavaScript

gradle test
  Runs Mockito test on the Presenter with involving a broswer or browser simulator

gradle clean war jettyRun
  Cross compiles the client side Java into JavaScript; launches Jetty.  Use any browser to
  connect to the localhost on the port defined by 'jettyRun.httpPort'

gradle clean
  Delete working files in 'project.buildDir'; invokes 'cleanGWT' to remove the directory
  used by the GWT DevMode environment
${'='*80}
"""}

import org.apache.tools.ant.filters.ReplaceTokens
import static java.awt.Desktop.desktop

apply plugin: 'java'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'war'

buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
  }

  dependencies {
    classpath "org.akhikhl.gretty:gretty:2.0.0"
  }
}

//============================================================================================
// C O N F I G U R A T I O N =================================================================
//============================================================================================

// Project Configuration --------------------------------------------------------

ext.applicationName = "5-HelloWorld-InnerIntf"
group = 'com.smartgwt'
version = '1.0'


// GWT Compiler Configuration ---------------------------------------------------

ext.gwtModuleXML = 'demo.HelloWorld'   // Path to module descriptor
ext.gwtModule    = 'helloworld'        // 'rename-to' within module descriptor
ext.gwtStartPage = 'HelloWorld.html'   // HTML startup page
ext.gwtBuildDir  = "${buildDir}-gwt"   // GWT build directory


// Properties -------------------------------------------------------------------

ext.localityProperties = [
        'application.version' : project.version,
        'application.name'    : applicationName,
        'welcome-file'        : gwtStartPage,
        'gwtModule'           : gwtModule,
        'user.agent'          : findProperty('user.agent') ?: 'safari'
    ]


// Java Compiler Configuration -------------------------------------------------

sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility
compileJava { 
    // options.compilerArgs << '-Xlint:-unchecked'
    options.compilerArgs << '-Xlint:-deprecation'
} 




// WAR Configuration -----------------------------------------------------------

// Don't add Java compiled client side classes to the WAR
ext.excludedClasses = [
    '**/client/**',
    '**/*.gwt.xml'
]


//============================================================================================
// R e p o s i t o r i e s   &   D e p e n d e n c i e s =====================================
//============================================================================================


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}


// Create a GWT Compiler & Selenium compile configuration
configurations { [seleniumCompile] }

dependencies {

    // Dependency Versions 

    def gwtSDK       = '2.8.1'
    def smartgwt     = '6.1-LPGL'
    def gin          = '1.5.0'
    def guice        = '4.0'
    def junit        = '4.12'
    def mockito      = '1.10.19'
    def selenium     = '2.48.2'

    // Download the LGPL versions from http://www.smartclient.com/product/download.jsp
    compile files(
        "../lib/SmartGWT-$smartgwt/smartgwt.jar", 
        "../lib/SmartGWT-$smartgwt/smartgwt-skins.jar"
    )

    compile ([

        // GWT --------------------------------------------------------
        "com.google.gwt:gwt-user:$gwtSDK",
        "com.google.gwt:gwt-dev:$gwtSDK",
        "com.google.gwt:gwt-servlet:$gwtSDK",
        "com.google.gwt:gwt-codeserver:$gwtSDK",

        // Google Dependency Injection
        "com.google.gwt.inject:gin:$gin",
        "com.google.inject:guice:$guice"

    ])
    
    runtime ([ ])        // TDB

    testCompile([ 
        "junit:junit:$junit",
        "org.mockito:mockito-core:$mockito"
    ])

    testRuntime([ ])     // TDB

    seleniumCompile ([ 
        "junit:junit:$junit",
        "org.seleniumhq.selenium:selenium-java:$selenium"
    ]) 

}


//============================================================================================
// S O U R C E   S E T S  ====================================================================
//============================================================================================

sourceSets {

    selenium {
        java { srcDirs 'src/selenium/java' }
    }

}


//============================================================================================
// G R A D L E   T A S K S  ==================================================================
//============================================================================================

// Also clean the GWT build directory

clean { dependsOn 'cleanGWT' }

task cleanGWT(type:Delete) {
    delete './gwt-unitCache'
    delete gwtBuildDir
}

// Augment the 'processResources' task from the 'java' plugin.  Use filtering to replace
//   '@...@' tags with properties in order to customize the target environment

processResources {
    filter(ReplaceTokens, tokens: localityProperties)
}


//============================================================================================
// G W T   C O M P I L E   A N D   B U I L D    T A S K S ====================================
//============================================================================================

task compileGWT(dependsOn: ['compileJava', 'copyWebAppResources'], type:JavaExec) {

    description ='Cross compiles Java into JavaScript for each browser specified'

    // Don't invoke GWT compiler if no source code has changed; 
    //  Gradle Goodness at work here!!

    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir new File("${gwtBuildDir}/${gwtModule}")

    // Define the properties for the 'JavaExec' task
    main ='com.google.gwt.dev.Compiler'
    
    jvmArgs = ['-Xmx1024M']                 // Memory, increase for larger Apps

    classpath = files ([
        sourceSets.main.java.srcDirs,      // Contains Java sources to be compiled into JavaScript
        sourceSets.main.runtimeClasspath   // Contains .gwt.xml file
    ])

    args = ['-war', gwtBuildDir, gwtModuleXML]

}


task devMode(dependsOn: ['compileJava', 'copyWebAppResources', 'copyLibraries'], type:JavaExec) {

    description = 'Launches the "DevMode" environment'

    main ='com.google.gwt.dev.DevMode'
    
    jvmArgs = ['-Xmx1024M']                 // Memory, increase for larger Apps
    jvmArgs += '-Dgwt.nowarn.webapp.classpath'  // Supress DevMode classpath warnings

    classpath = files([
        sourceSets.main.java.srcDirs,      // Contains Java sources to be compiled into JavaScript
        sourceSets.main.runtimeClasspath   // Contains .gwt.xml file
    ])

    args = [ "-startupUrl", gwtStartPage,  "-war", gwtBuildDir,  gwtModuleXML]
}

task copyWebAppResources(type: Copy) {

    description = "Copies resources into the '$gwtBuildDir' directory"

    // Modify the web.xml & html startup file to provide a description
    from('src/main/webapp') {
        include '**/web.xml'
        include "**/${gwtStartPage}"
        filter(ReplaceTokens, tokens: localityProperties)
    }

    // Copy the remaining unmodified files
    from('src/main/webapp') {
       exclude '**/web.xml'
       exclude "**/${gwtStartPage}"
    }

    into gwtBuildDir
}

task copyLibraries(type: Copy) {

    description = "Copies server side libraries into the '$gwtBuildDir' WEB-INF/lib directory"

    from (sourceSets.main.runtimeClasspath) { include '**/*.jar'}
    into "${gwtBuildDir}/WEB-INF/lib"
}


//============================================================================================
// W A R   C O N F I G U R A T I O N =========================================================
//============================================================================================


// WAR and Jetty builds; should use 'compileGWT' directory rather than 'src/main/webapp'
webAppDirName = "${gwtBuildDir}"


// Custom build our WAR in order to remove GWT compiled classes and unused
//    SmartGWT resources i.e. skins and tools

war {

    dependsOn =  [compileGWT]

    // Undefine the default 'war' classpath; we'll create our own
    classpath = []

    // Copy everything except the excluded classes and the Jar files
    from (sourceSets.main.runtimeClasspath) {
        into 'WEB-INF/classes'
        excludes = excludedClasses
        exclude  '*.jar'
    }

    // Put the Jar files into 'WEB-INF/lib' exclude those used by the GWT Compiler
    from (sourceSets.main.runtimeClasspath) {
        into 'WEB-INF/lib'
        include '*.jar'
        exclude  'gwt-servlet-*.jar'
        exclude  'gwt-user-*.jar'
    }

    // Exclude resources which we don't want in the WAR
    excludes = [ 
            'WEB-INF/deploy',
            gwtModule + '/sc/skins/Enterprise',
            gwtModule + '/sc/skins/EnterpriseBlue',
            gwtModule + '/sc/skins/ToolSkin',
            gwtModule + '/tools'
        ]
}


//============================================================================================
// G R E T T Y   C O N F I G U R A T I O N  ==================================================
//============================================================================================

gretty {

    servletContainer = 'jetty9'

    httpEnabled = true
    httpPort = 9090
    jvmArgs { '-ea' }

    loggingLevel = 'INFO' // options:   'ALL', 'DEBUG', 'ERROR', 'INFO', 'OFF', 'TRACE', 'WARN'

}

/*

// Background daemon used by Selenium testing
task jettyDaemon(type: org.gradle.api.plugins.jetty.JettyRun, dependsOn: compileGWT) {
    daemon = true
    httpPort = 9090              // Avoid potential conflicts with existing 8080
    stopPort = 9091
    stopKey = "stop jettyDaemon"
}

jettyStop {
    stopPort = 9091
    stopKey = "stop jettyDaemon"

}

*/

//============================================================================================
// S E L E N I U M   C O N F I G U R A T I O N  ============================================== 
//============================================================================================

/*
task seleniumTests(type: Test, dependsOn: jettyDaemon) {

    // Always run tests
    outputs.upToDateWhen { false }

    // Pass the test URL and the test browser [safari, chrome, firefox]
    systemProperty "selenium.test.url", "http://localhost:${jettyRun.httpPort}/${project.name}/${gwtStartPage}"
    systemProperty "selenium.test.browser", "safari"

    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    finalizedBy jettyStop
}
*/

//============================================================================================
// U N I T   T E S T I N G ===================================================================
//============================================================================================

// Launch the browser if any unit or Selenium tests fails and display the report

gradle.taskGraph.afterTask { task, taskState ->
    if ( (task.name == 'test' || task.name == 'seleniumTests') && taskState.failure)
        desktop.browse(new File(testReportDir, 'index.html').toURI())
}



