task usage doLast { 
    print """${'='*80}
${applicationName}, v${project.version}

gradle compileJava
  Compile Java source code displaying warnings and error to the terminal console. Does not
  cross compile Java to JavaScript

gradle clearReports test report
  Runs Mockito unit tests on the Presenter without creating a broswer or browser simulator

gradle clearReports war bddTests aggregate report
  Runs BDD tests by launching Jetty in the background; Choose the test browser
  via a System Property; Valid browsers include [safari, chrome, firefox]

gradle war appRun
  Cross compiles the client side Java into JavaScript; launches '${gretty.servletContainer}'.  
  Use any browser to connect to the localhost on the port defined by '${gretty.httpPort}'.

gradle clean
  Delete working files in '${project.buildDir}'; invokes 'cleanGWT' to remove the directory
  used by the GWT DevMode environment
${'='*80}
"""}

import org.apache.tools.ant.filters.ReplaceTokens
import static java.awt.Desktop.desktop

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'org.akhikhl.gretty'

buildscript {

    def serenityPlugin = '1.5.10'  // Sep 2017
    def grettyPlugin   = '2.0.0'

  repositories {
    mavenLocal()
    jcenter()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
  }

  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:$serenityPlugin")
    classpath "org.akhikhl.gretty:gretty:$grettyPlugin"
  }
}

//============================================================================================
// C O N F I G U R A T I O N =================================================================
//============================================================================================

// Project Configuration --------------------------------------------------------

ext.applicationName = "9-HelloWorld-ComponentXML"
group = 'com.smartgwt'
version = '1.0'


// GWT Compiler Configuration ---------------------------------------------------

ext.gwtModuleXML = 'demo.HelloWorld'   // Path to module descriptor
ext.gwtModule    = 'helloworld'        // 'rename-to' within module descriptor
ext.gwtStartPage = 'HelloWorld.html'   // HTML startup page
ext.gwtBuildDir  = "${buildDir}-gwt"   // GWT build directory


// Selenide, Selenium, Page Object Configuration -------------------------------

// Selenide
ext.selenideBrowser = findProperty('selenide.browser') ?: 'chrome'
ext.selenideBrowserSize = findProperty('selenide.browser-size') ?: '1200x800'
ext.selenideTimeout = findProperty('selenide.timeout') ?: '4000'

// Selenide Wait and Sleep delays
ext.pageobjectsWait = findProperty('pageobjects.wait') ?: '10000'
ext.pageobjectsSleep = findProperty('pageobjects.sleep') ?: '1000'
ext.pageobjectsLongerSleep = findProperty('pageobjects.longerSleep') ?: '2000'

ext.showOutput = (findProperty('testing.showOutput') ?: 'false').toBoolean()

// GWT and Application Properties ----------------------------------------------

ext.localityProperties = [
        'application.version' : project.version,
        'application.name'    : applicationName,
        'welcome-file'        : gwtStartPage,
        'gwtModule'           : gwtModule,
        'user.agent'          : findProperty('user.agent') ?: 'safari'
    ]


// Java Compiler Configuration -------------------------------------------------

sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility
compileJava { 
    // options.compilerArgs << '-Xlint:-unchecked'
    options.compilerArgs << '-Xlint:-deprecation'
} 


// WAR Configuration -----------------------------------------------------------

// Don't add GWT cross compiled client side classes to the WAR
ext.excludedClasses = [
    '**/client/**',
    '**/*.gwt.xml'
]


//============================================================================================
// R e p o s i t o r i e s   &   D e p e n d e n c i e s =====================================
//============================================================================================


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}


// Create a GWT Compiler & Selenium compile configuration

configurations { 
    bddCompile
    bddRuntime 
}

dependencies {

    // Dependency Versions

    // SmartGWT Application
    def gwtSDK       = '2.8.1'
    def smartgwt     = '5.1-Power'
    def gin          = '1.5.0'
    def guice        = '4.0'

    // Testing
    def junit        = '4.12'           // Dec 2014
    def mockito      = '1.10.19'
    def selenium     = '2.48.2'

    // Last checked MVNRepository.com: 10-Aug-2017
    def cucumber     = '1.2.5'          // Sep 2016
    def selenide     = '4.6'            // Aug 2017
    def bdd          = '1.5.4'          // Jul 2017
    def slf4j        = '1.7.25'         // Mar 2017

    // Download the Pro or Power versions; These are licsensed but 
    //      limited demos exist
    compile files(
        "../lib/SmartGWT-$smartgwt/smartgwtpower.jar",
        "../lib/SmartGWT-$smartgwt/smartgwt-skins.jar"
    )

    compile ([

        // GWT --------------------------------------------------------
        "com.google.gwt:gwt-user:$gwtSDK",
        "com.google.gwt:gwt-dev:$gwtSDK",
        "com.google.gwt:gwt-servlet:$gwtSDK",

        // Google Dependency Injection
        "com.google.gwt.inject:gin:$gin",
        "com.google.inject:guice:$guice"
    ])
   

    runtime files (
        // From the Pro or Power 'lib' directory
        //    Contains 'ScreenLoaderServlet'
        "../lib/SmartGWT-$smartgwt/isomorphic/isomorphic_core_rpc.jar",
        "../lib/SmartGWT-$smartgwt/isomorphic/isc-jakarta-oro-2.0.6.jar"
    )

    runtime([

        // Third Party Support via Maven Central
        'joda-time:joda-time:2.9.9',
        'log4j:log4j:1.2.15',
        'org.slf4j:slf4j-api:1.7.7',
        'org.slf4j:slf4j-log4j12:1.7.7',
        'commons-jxpath:commons-jxpath:1.3',
        'commons-pool:commons-pool:1.4',
        'org.apache.velocity:velocity:1.7'
    ])

    testCompile([ 
        "junit:junit:$junit",
        "org.mockito:mockito-core:$mockito"
    ])

    testRuntime([ ])     // TBD

    bddCompile([
        "info.cukes:cucumber-groovy:$cucumber",
        "net.serenity-bdd:serenity-cucumber:$bdd",
        "com.codeborne:selenide:$selenide",
        "org.seleniumhq.selenium:selenium-java:$selenium"       
    ])

    bddRuntime ([ ])     // TBD
}


//============================================================================================
// S O U R C E   S E T S  ====================================================================
//============================================================================================

sourceSets {
  
    // Use libraries defined in 'bddCompile' and 'bddRuntime' configurations
    bdd {
        groovy {
            srcDirs = ['src/bdd/groovy']
        }

        java {
            srcDirs = ['src/bdd/java']
        }

        // Libraries needed to compile
        compileClasspath = configurations.bddCompile

        // Compiled classes & libraries needed to run the tests
        runtimeClasspath = output + compileClasspath + configurations.bddRuntime
    }  
 
}


//============================================================================================
// G R A D L E   T A S K S  ==================================================================
//============================================================================================

// Also clean the GWT build directories

clean { dependsOn 'cleanGWT' }

task cleanGWT(type:Delete) {
    delete './gwt-unitCache'
    delete gwtBuildDir
}

// Augment the 'processResources' task from the 'java' plugin.  Use filtering to replace
//   '@...@' tags with properties in order to customize the target environment

processResources {
    filter(ReplaceTokens, tokens: localityProperties)
}

//============================================================================================
// G W T   C O M P I L E   A N D   B U I L D    T A S K S ====================================
//============================================================================================

task compileGWT(dependsOn: ['compileJava', 'copyWebAppResources'], type:JavaExec) {

    description ='Cross compiles Java into JavaScript for each browser specified'

    // Don't invoke GWT compiler if no source code has changed; 
    //  Gradle Goodness at work here!!

    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir new File("${gwtBuildDir}/${gwtModule}")

    // Define the properties for the 'JavaExec' task
    main ='com.google.gwt.dev.Compiler'
    jvmArgs = ['-Xmx1024M']                 // Memory, increase for larger Apps

    classpath = files ([
        sourceSets.main.java.srcDirs,     // Contains Java sources to be compiled into JavaScript
        sourceSets.main.runtimeClasspath  // Contains .gwt.xml file
    ])

    args = ['-war', gwtBuildDir, gwtModuleXML]

}


task copyWebAppResources(type: Copy) {

    description = "Copies resources into the '$gwtBuildDir' directory"

    // Modify the web.xml & html startup file to provide a description
    from('src/main/webapp') {
        include '**/web.xml'
        include "**/${gwtStartPage}"
        filter(ReplaceTokens, tokens: localityProperties)
    }

    // Copy the remaining unmodified files
    from('src/main/webapp') {
       exclude '**/web.xml'
       exclude "**/${gwtStartPage}"
    }

    into gwtBuildDir
}


//============================================================================================
// W A R   C O N F I G U R A T I O N =========================================================
//============================================================================================


// WAR and Jetty builds; should use 'compileGWT' directory rather than 'src/main/webapp'
webAppDirName = "${gwtBuildDir}"


// Custom build our WAR in order to remove GWT compiled classes and unused
//    SmartGWT resources i.e. skins and tools

war {

    dependsOn =  [compileGWT]

    // Undefine the default 'war' classpath; we'll create our own
    classpath = []

    // Copy everything except the excluded classes and the Jar files
    from (sourceSets.main.runtimeClasspath) {
        into 'WEB-INF/classes'
        excludes = excludedClasses
        exclude  '*.jar'
    }

    // Put the Jar files into 'WEB-INF/lib' exclude those used by the GWT Compiler
    from (sourceSets.main.runtimeClasspath) {
        into 'WEB-INF/lib'
        include '*.jar'
        exclude  'gwt-servlet-*.jar'
        exclude  'gwt-dev-*.jar'
        exclude  'gwt-user-*.jar'
        exclude  'gwt-codeserver-*.jar'
    }

    // Exclude resources which we don't want in the WAR
    excludes = [ 
            'WEB-INF/deploy',
            gwtModule + '/sc/skins/Enterprise',
            gwtModule + '/sc/skins/EnterpriseBlue',
            gwtModule + '/sc/skins/ToolSkin',
            gwtModule + '/tools'
        ]
}



//============================================================================================
// G R E T T Y   C O N F I G U R A T I O N  ==================================================
//============================================================================================

gretty {

    servletContainer = 'jetty9'

    httpEnabled = true
    httpPort = 9090
    jvmArgs { '-ea' }

    loggingLevel = 'INFO' // options:   'ALL', 'DEBUG', 'ERROR', 'INFO', 'OFF', 'TRACE', 'WARN'

    // Task to run after starting up the Servlet Container
    integrationTestTask = 'bddTest'
}


//============================================================================================
// B D D   C O N F I G U R A T I O N  ====================================================== 
//============================================================================================

task bddTest(type: Test) {

    include '/glue/**/*Test.class'

    testClassesDirs = files(sourceSets.bdd.groovy.outputDir)
    classpath = sourceSets.bdd.runtimeClasspath

    reports.html.destination = new File(testReportDir, 'cucumber')
    reports.junitXml.destination = new File(testReportDir, 'cucumber-xml')

    // If a test fails, do not quit but move onto the next test
    ignoreFailures true

    // Always run tests; This happens when the data or configuration has changed but not the test code
    outputs.upToDateWhen { false }

    systemProperty 'selenide.baseUrl', "http://localhost:${gretty.httpPort}/${applicationName}"
    systemProperty 'selenide.browser', selenideBrowser
    systemProperty 'selenide.browser-size', selenideBrowserSize
    systemProperty 'selenide.timeout', selenideTimeout

    // Selenide Wait and Sleep delays
    systemProperty 'pageobjects.wait', pageobjectsWait
    systemProperty 'pageobjects.sleep', pageobjectsSleep
    systemProperty 'pageobjects.longerSleep', pageobjectsLongerSleep

    // External webdriver executatables; Defined in 'gradle.properties'
    switch (selenideBrowser) {
        case 'chrome':
            systemProperty 'webdriver.chrome.driver', chromedriver; break
        case 'firefox':
            systemProperty 'webdriver.gecko.driver', firefoxdriver; break
        case 'jbrowser':
            systemProperty 'java.awt.headless', 'true'
            systemProperty 'jbd.useragent', 'chrome'
            systemProperty 'jbd.headless', 'true'
            systemProperty 'jbd.javascript', 'true'
            systemProperty 'jbd.quickrender', 'true'
            systemProperty 'jbd.screenwidth', '1200'
            systemProperty 'jbd.screenheight', '1300'
            break
    }


 }


//============================================================================================
//  R E P O R T I N G  =======================================================================
//============================================================================================


task reports {
    doLast {
        displayReport 'test'
        displayReport 'cucumber'
        displayReport 'serenity'
    }  
}

// BDD 'clearReports' also clears other test reports
clearReports.doLast {
    delete testReportDir
}

private def displayReport(def reportName) {
    try {
        desktop.browse(new File("$buildDir.name/$reportsDir.name/tests/${reportName}", 'index.html').toURI())
    } catch (IOException exception) { /* Ignore missing report */ }
}

//============================================================================================
// T E S T   C O N F I G U R A T I O N  ====================================================== 
//============================================================================================

// Define common behavior for all tests i.e. Unit, BDD, Cucumber
tasks.withType(Test) {

    // Set options for log level LIFECYCLE
    testLogging {
        events 'standardError'
        showExceptions showOutput
        exceptionFormat 'short'
        showCauses showOutput
        showStackTraces showOutput
        showStandardStreams = showOutput
    }

    // Display a green/red bar after the tests finish
    afterSuite { desc, result ->
        if (desc.parent == null) {
            // Green background for complete success, red for any failures
                print((result.resultType.toString() == 'SUCCESS' && result.testCount>0 ) ? '\033[1;37m\033[1;42m' : '\033[1;37m\033[1;41m')
            print "Results: ${result.resultType} "
            print "(${result.testCount} tests, "
            print "${result.successfulTestCount} successes, "
            print "${result.failedTestCount} failures, "
            print "${result.skippedTestCount} skipped)"
            println '\033[0m'
        }
    }


}


